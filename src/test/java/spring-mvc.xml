<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 引入activiti的配置文件 -->                        
	<!-- <import resource="classpath:activiti/activiti.cfg.xml"/> -->
	
	<!--启用spring的一些annotation -->
	<context:annotation-config/>

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="pers.marscheng.spring" />

	<!--HandlerMapping 无需配置，springmvc可以默认启动-->

	<!--静态资源映射-->
	<!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下-->
	<!-- <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/> -->
	<!-- <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/> -->
	<!-- <mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/> -->

	<!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下-->
	<mvc:resources mapping="/css/**" location="/statics/css/"/>
	<mvc:resources mapping="/js/**" location="/statics/js/"/>
	<mvc:resources mapping="/image/**" location="/statics/images/"/>

	<!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
	<mvc:annotation-driven/>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/views/"/><!--设置JSP文件的目录位置-->
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- springmvc文件上传需要配置的节点-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="20971500"/>
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="resolveLazily" value="true"/>
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close"><!-- 设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露 --> 
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/hibernateDB" />
        <property name="username" value="hibernate" />
        <property name="password" value="hibernate" />
        <property name="defaultReadOnly" value="false" /><!-- 设置为只读状态，配置读写分离时，读库可以设置为true
        在连接池创建后，会初始化并维护一定数量的数据库安连接，当请求过多时，数据库会动态增加连接数，
        当请求过少时，连接池会减少连接数至一个最小空闲值 -->
        <property name="initialSize" value="5" /><!-- 在启动连接池初始创建的数据库连接，默认为0 -->
        <property name="maxActive" value="15" /><!-- 设置数据库同一时间的最大活跃连接默认为8，负数表示不闲置 -->
        <property name="maxIdle" value="10"/><!-- 在连接池空闲时的最大连接数，超过的会被释放，默认为8，负数表示不闲置 -->
        <property name="minIdle" value="2" /><!-- 空闲时的最小连接数，低于这个数量会创建新连接，默认为0 -->
        <property name="maxWait" value="10000" /><!-- 连接被用完时等待归还的最大等待时间，单位毫秒，超出时间抛异常，默认为无限等待 -->
    </bean>
    <!-- 配置我们的回话工厂-->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
        <property name="hibernateProperties">
            <props>
                <!-- MySQL的方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <!-- 必要时在数据库新建所有表格 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <!-- 配置current session的上下文环境，方便我们调用sessionFactory获取当前线程统一个session对象 -->
                <prop key="current_session_context_class">thread</prop>
                <!-- 用更漂亮的格式显示sql语句-->
                <!-- <prop key="hibernate.format_sql">true</prop> -->
            </props>
        </property>
        <property name="packagesToScan" value="pers.marscheng.spring.dto" /><!-- 配置需要扫描的包路径，在该包下，所有的类注解配置都会被扫描 -->
    </bean>
	
</beans>